{
    "openapi": "3.1.0",
    "info": {
        "title": "Crawl4AI API",
        "version": "1.0.0"
    },
    "paths": {
        "/": {
            "get": {
                "summary": "Root",
                "operationId": "root__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "summary": "Metrics",
                "operationId": "metrics_metrics_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/llm/job": {
            "post": {
                "summary": "Llm Job Enqueue",
                "operationId": "llm_job_enqueue_llm_job_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LlmJobPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/llm/job/{task_id}": {
            "get": {
                "summary": "Llm Job Status",
                "operationId": "llm_job_status_llm_job__task_id__get",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Task Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/crawl/job": {
            "post": {
                "summary": "Crawl Job Enqueue",
                "operationId": "crawl_job_enqueue_crawl_job_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrawlJobPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/crawl/job/{task_id}": {
            "get": {
                "summary": "Crawl Job Status",
                "operationId": "crawl_job_status_crawl_job__task_id__get",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Task Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "summary": "Get Token",
                "operationId": "get_token_token_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/config/dump": {
            "post": {
                "summary": "Config Dump",
                "operationId": "config_dump_config_dump_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RawCode"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/md": {
            "post": {
                "summary": "Get Markdown",
                "operationId": "get_markdown_md_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MarkdownRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/html": {
            "post": {
                "summary": "Generate Html",
                "description": "Crawls the URL, preprocesses the raw HTML for schema extraction, and returns the processed HTML.\nUse when you need sanitized HTML structures for building schemas or further processing.",
                "operationId": "generate_html_html_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HTMLRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/screenshot": {
            "post": {
                "summary": "Generate Screenshot",
                "description": "Capture a full-page PNG screenshot of the specified URL, waiting an optional delay before capture,\nUse when you need an image snapshot of the rendered page. Its recommened to provide an output path to save the screenshot.\nThen in result instead of the screenshot you will get a path to the saved file.",
                "operationId": "generate_screenshot_screenshot_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScreenshotRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/pdf": {
            "post": {
                "summary": "Generate Pdf",
                "description": "Generate a PDF document of the specified URL,\nUse when you need a printable or archivable snapshot of the page. It is recommended to provide an output path to save the PDF.\nThen in result instead of the PDF you will get a path to the saved file.",
                "operationId": "generate_pdf_pdf_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PDFRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/execute_js": {
            "post": {
                "summary": "Execute Js",
                "description": "Execute a sequence of JavaScript snippets on the specified URL.\nReturn the full CrawlResult JSON (first result).\nUse this when you need to interact with dynamic pages using JS.\nREMEMBER: Scripts accept a list of separated JS snippets to execute and execute them in order.\nIMPORTANT: Each script should be an expression that returns a value. It can be an IIFE or an async function. You can think of it as such.\n    Your script will replace '{script}' and execute in the browser context. So provide either an IIFE or a sync/async function that returns a value.\nReturn Format:\n    - The return result is an instance of CrawlResult, so you have access to markdown, links, and other stuff. If this is enough, you don't need to call again for other endpoints.\n\n    ```python\n    class CrawlResult(BaseModel):\n        url: str\n        html: str\n        success: bool\n        cleaned_html: Optional[str] = None\n        media: Dict[str, List[Dict]] = {}\n        links: Dict[str, List[Dict]] = {}\n        downloaded_files: Optional[List[str]] = None\n        js_execution_result: Optional[Dict[str, Any]] = None\n        screenshot: Optional[str] = None\n        pdf: Optional[bytes] = None\n        mhtml: Optional[str] = None\n        _markdown: Optional[MarkdownGenerationResult] = PrivateAttr(default=None)\n        extracted_content: Optional[str] = None\n        metadata: Optional[dict] = None\n        error_message: Optional[str] = None\n        session_id: Optional[str] = None\n        response_headers: Optional[dict] = None\n        status_code: Optional[int] = None\n        ssl_certificate: Optional[SSLCertificate] = None\n        dispatch_result: Optional[DispatchResult] = None\n        redirected_url: Optional[str] = None\n        network_requests: Optional[List[Dict[str, Any]]] = None\n        console_messages: Optional[List[Dict[str, Any]]] = None\n\n    class MarkdownGenerationResult(BaseModel):\n        raw_markdown: str\n        markdown_with_citations: str\n        references_markdown: str\n        fit_markdown: Optional[str] = None\n        fit_html: Optional[str] = None\n    ```",
                "operationId": "execute_js_execute_js_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JSEndpointRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/llm/{url}": {
            "get": {
                "summary": "Llm Endpoint",
                "operationId": "llm_endpoint_llm__url__get",
                "parameters": [
                    {
                        "name": "url",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Url"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Q"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schema": {
            "get": {
                "summary": "Get Schema",
                "operationId": "get_schema_schema_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "summary": "Health",
                "operationId": "health_health_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/crawl": {
            "post": {
                "summary": "Crawl",
                "description": "Crawl a list of URLs and return the results as JSON.",
                "operationId": "crawl_crawl_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrawlRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/crawl/stream": {
            "post": {
                "summary": "Crawl Stream",
                "operationId": "crawl_stream_crawl_stream_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrawlRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/map": {
            "post": {
                "summary": "Map Endpoint",
                "description": "Discover URLs from a root, returning up to `limit` URLs.",
                "operationId": "map_endpoint_map_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ask": {
            "get": {
                "summary": "Get Context",
                "description": "This end point is design for any questions about Crawl4ai library. It returns a plain text markdown with extensive information about Crawl4ai. \nYou can use this as a context for any AI assistant. Use this endpoint for AI assistants to retrieve library context for decision making or code generation tasks.\nAlway is BEST practice you provide a query to filter the context. Otherwise the lenght of the response will be very long.\n\nParameters:\n- context_type: Specify \"code\" for code context, \"doc\" for documentation context, or \"all\" for both.\n- query: RECOMMENDED search query to filter paragraphs using BM25. You can leave this empty to get all the context.\n- score_ratio: Minimum score as a fraction of the maximum score for filtering results.\n- max_results: Maximum number of results to return. Default is 20.\n\nReturns:\n- JSON response with the requested context.\n- If \"code\" is specified, returns the code context.\n- If \"doc\" is specified, returns the documentation context.\n- If \"all\" is specified, returns both code and documentation contexts.",
                "operationId": "get_context_ask_get",
                "parameters": [
                    {
                        "name": "context_type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "pattern": "^(code|doc|all)$",
                            "default": "all",
                            "title": "Context Type"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "search query to filter chunks",
                            "title": "Query"
                        },
                        "description": "search query to filter chunks"
                    },
                    {
                        "name": "score_ratio",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "description": "min score as fraction of max_score",
                            "default": 0.5,
                            "title": "Score Ratio"
                        },
                        "description": "min score as fraction of max_score"
                    },
                    {
                        "name": "max_results",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "absolute cap on returned chunks",
                            "default": 20,
                            "title": "Max Results"
                        },
                        "description": "absolute cap on returned chunks"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mcp/sse": {
            "get": {
                "summary": " Mcp Sse",
                "operationId": "_mcp_sse_mcp_sse_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/mcp/schema": {
            "get": {
                "summary": " Schema Endpoint",
                "operationId": "_schema_endpoint_mcp_schema_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CrawlJobPayload": {
                "properties": {
                    "urls": {
                        "items": {
                            "type": "string",
                            "maxLength": 2083,
                            "minLength": 1,
                            "format": "uri"
                        },
                        "type": "array",
                        "title": "Urls"
                    },
                    "browser_config": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Browser Config",
                        "default": {}
                    },
                    "crawler_config": {
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Crawler Config",
                        "default": {}
                    }
                },
                "type": "object",
                "required": [
                    "urls"
                ],
                "title": "CrawlJobPayload"
            },
            "CrawlRequest": {
                "properties": {
                    "urls": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "maxItems": 100,
                        "minItems": 1,
                        "title": "Urls"
                    },
                    "browser_config": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Browser Config"
                    },
                    "crawler_config": {
                        "anyOf": [
                            {
                                "additionalProperties": true,
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Crawler Config"
                    }
                },
                "type": "object",
                "required": [
                    "urls"
                ],
                "title": "CrawlRequest"
            },
            "FilterType": {
                "type": "string",
                "enum": [
                    "raw",
                    "fit",
                    "bm25",
                    "llm"
                ],
                "title": "FilterType"
            },
            "HTMLRequest": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "HTMLRequest"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "JSEndpointRequest": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "scripts": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Scripts",
                        "description": "List of separated JavaScript snippets to execute"
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "scripts"
                ],
                "title": "JSEndpointRequest"
            },
            "LlmJobPayload": {
                "properties": {
                    "url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "title": "Url"
                    },
                    "q": {
                        "type": "string",
                        "title": "Q"
                    },
                    "schema": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Schema"
                    },
                    "cache": {
                        "type": "boolean",
                        "title": "Cache",
                        "default": false
                    },
                    "provider": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Provider"
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "q"
                ],
                "title": "LlmJobPayload"
            },
            "MapRequest": {
                "properties": {
                    "root": {
                        "type": "string",
                        "title": "Root",
                        "description": "Root domain or URL to discover from"
                    },
                    "limit": {
                        "type": "integer",
                        "maximum": 10000.0,
                        "minimum": 1.0,
                        "title": "Limit",
                        "default": 1000
                    },
                    "source": {
                        "type": "string",
                        "title": "Source",
                        "description": "'sitemap', 'cc', or 'sitemap+cc'",
                        "default": "sitemap+cc"
                    },
                    "pattern": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Pattern",
                        "description": "Glob-like URL include pattern",
                        "default": "*"
                    },
                    "extract_head": {
                        "type": "boolean",
                        "title": "Extract Head",
                        "default": false
                    },
                    "live_check": {
                        "type": "boolean",
                        "title": "Live Check",
                        "default": false
                    },
                    "concurrency": {
                        "type": "integer",
                        "maximum": 5000.0,
                        "minimum": 1.0,
                        "title": "Concurrency",
                        "default": 200
                    },
                    "hits_per_sec": {
                        "type": "integer",
                        "maximum": 1000.0,
                        "minimum": 0.0,
                        "title": "Hits Per Sec",
                        "default": 5
                    },
                    "query": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Query"
                    },
                    "score_threshold": {
                        "anyOf": [
                            {
                                "type": "number",
                                "maximum": 1.0,
                                "minimum": 0.0
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Score Threshold"
                    },
                    "filter_nonsense_urls": {
                        "type": "boolean",
                        "title": "Filter Nonsense Urls",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "root"
                ],
                "title": "MapRequest"
            },
            "MarkdownRequest": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url",
                        "description": "Absolute http/https URL to fetch"
                    },
                    "f": {
                        "$ref": "#/components/schemas/FilterType",
                        "description": "Content\u2011filter strategy: fit, raw, bm25, or llm",
                        "default": "fit"
                    },
                    "q": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Q",
                        "description": "Query string used by BM25/LLM filters"
                    },
                    "c": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "C",
                        "description": "Cache\u2011bust / revision counter",
                        "default": "0"
                    },
                    "provider": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Provider",
                        "description": "LLM provider override (e.g., 'anthropic/claude-3-opus')"
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "MarkdownRequest",
                "description": "Request body for the /md endpoint."
            },
            "PDFRequest": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "output_path": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output Path"
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "PDFRequest"
            },
            "RawCode": {
                "properties": {
                    "code": {
                        "type": "string",
                        "title": "Code"
                    }
                },
                "type": "object",
                "required": [
                    "code"
                ],
                "title": "RawCode"
            },
            "ScreenshotRequest": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url"
                    },
                    "screenshot_wait_for": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Screenshot Wait For",
                        "default": 2
                    },
                    "output_path": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Output Path"
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "ScreenshotRequest"
            },
            "TokenRequest": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ],
                "title": "TokenRequest"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        }
    }
}
